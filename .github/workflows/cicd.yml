name: ci-cd

on:
  push:
    branches: [ main ]

env:
  USERNAME: antuanuran
  IMAGE_NAME: diploma_antuan

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check black
        run: black --check .

      - name: Check isort
        run: isort -c .

      - name: Test with unittest
        run: python -m unittest tests/test_file.py


  build:
    if: github.event_name == 'push'
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.USERNAME }}
          password: ${{ secrets.PASSWORD_HUB }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - run: |
          echo "Позже будет Deploy"

#      - name: Connect
#        uses: appleboy/ssh-action@master
#        with:
#          host: 79.174.83.233
#          username: root
#          key: ${{ secrets.SSH_K }}
#          script: |
#            cd /root/
#            docker pull ${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest
#            docker-compose down && docker-compose up -d && docker ps






#*******************************************************************************************#

#name: ci-cd
#
#on:
#  push:
#    branches: [ main ]
#
#env:
#  REGISTRY: ghcr.io
#  IMAGE_NAME: diploma_antuan
#
#jobs:
#  tests:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#
#      - name: Set up python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.11
#
#      - name: Get pip cache dir
#        id: pip-cache-dir
#        run: |
#          echo "::set-output name=dir::$(pip cache dir)"
#
#      - name: Сaching dependencies
#        id: cache-pip
#        uses: actions/cache@v2
#        with:
#          path: ${{ steps.pip-cache-dir.outputs.dir }}
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements-dev.txt
#
#      - name: Check code style with black
#        run: black --check .
#
#      - name: Check imports ordering with isort
#        run: isort -c .
#
#
#  build:
#    if: github.event_name == 'push'
#    needs: tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v2
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          username: ${{ github.actor }}
#          password: ${{ github.token }}
#
#      - name: Build and push
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
#          cache-from: type=gha
#          cache-to: type=gha,mode=max
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Connect via SSH, pull, restart
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SSH_SERVER }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            cd /srv/euforia/backend
#
#            echo "${{ github.token }}" | docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin
#            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
#
#            docker-compose down && docker-compose up -d && docker ps
#
#            for image in $(docker images | grep none | awk '{print $3}' | cat); do docker rmi "$image"; done
